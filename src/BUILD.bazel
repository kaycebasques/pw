# Copyright 2023 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
load("@pigweed//pw_build:pigweed.bzl", "pw_cc_test")
load("//:stm32.bzl", "stm32_cc_binary")

package(default_visibility = ["//visibility:public"])

cc_binary(
    name = "echo",
    srcs = ["echo.cc"],
    malloc = select({
        "@platforms//cpu:armv7e-m": "@pigweed//pw_malloc",
        "//conditions:default": "@bazel_tools//tools/cpp:malloc",
    }),
    deps = [
        "@pigweed//pw_boot",
        "@pigweed//pw_sys_io",
        "@pigweed//targets:pw_assert_backend_impl",
    ] + select({
        "@platforms//cpu:armv7e-m": [
            "@pigweed//targets/stm32f429i_disc1:basic_linker_script",
            "@pigweed//targets/stm32f429i_disc1:pre_init",
        ],
        "//conditions:default": [],
    }),
)

stm32_cc_binary(
    name = "echo.elf",
    binary = ":echo",
)



pw_cc_test(
    name = "pw_i2c",
    srcs = ["pw_i2c.cc"],
    malloc = select({
        "@platforms//cpu:armv7e-m": "@pigweed//pw_malloc",
        "//conditions:default": "@bazel_tools//tools/cpp:malloc",
    }),
    deps = [
        "@pigweed//pw_boot",
        "@pigweed//pw_bytes",
        "@pigweed//pw_i2c:address",
        "@pigweed//pw_i2c:device",
        "@pigweed//pw_i2c:initiator",
        "@pigweed//pw_i2c:initiator_mock",
        "@pigweed//pw_log",
        "@pigweed//pw_result",
        "@pigweed//pw_unit_test",
        # "@pigweed//targets:pw_assert_backend_impl",
    ] + select({
        "@platforms//os:linux": [
            "@pigweed//pw_log_basic",
        ],
        "//conditions:default": [],
    }),
)

stm32_cc_binary(
    name = "pw_i2c.elf",
    binary = ":pw_i2c",
)



cc_binary(
    name = "pw_function",
    srcs = ["pw_function.cc"],
    malloc = select({
        "@platforms//cpu:armv7e-m": "@pigweed//pw_malloc",
        "//conditions:default": "@bazel_tools//tools/cpp:malloc",
    }),
    deps = [
        "@pigweed//pw_boot",
        "@pigweed//pw_sys_io",
        "@pigweed//pw_function",
        "@pigweed//targets:pw_assert_backend_impl",
    ] + select({
        "@platforms//cpu:armv7e-m": [
            "@pigweed//targets/stm32f429i_disc1:basic_linker_script",
            "@pigweed//targets/stm32f429i_disc1:pre_init",
        ],
        "//conditions:default": [],
    }),
)

stm32_cc_binary(
    name = "pw_function.elf",
    binary = ":pw_function",
)

cc_binary(
    name = "pw_kvs",
    srcs = ["pw_kvs.cc"],
    malloc = select({
        "@platforms//cpu:armv7e-m": "@pigweed//pw_malloc",
        "//conditions:default": "@bazel_tools//tools/cpp:malloc",
    }),
    deps = [
        "@pigweed//pw_boot",
        "@pigweed//pw_kvs",
        "@pigweed//pw_kvs:fake_flash_64_aligned_partition",
        "@pigweed//pw_sys_io",
        "@pigweed//targets:pw_assert_backend_impl",
    ] + select({
        "@platforms//cpu:armv7e-m": [
            "@pigweed//targets/stm32f429i_disc1:basic_linker_script",
            "@pigweed//targets/stm32f429i_disc1:pre_init",
        ],
        "//conditions:default": [],
    }),
)

stm32_cc_binary(
    name = "pw_kvs.elf",
    binary = ":pw_kvs",
)

cc_library(
    name = "pw_unit_test_lib",
    srcs = ["pw_unit_test_lib.cc"],
    hdrs = ["pw_unit_test_lib.h"],
    includes = ["."],
    deps = ["@pigweed//pw_string"],
)

pw_cc_test(
    name = "pw_unit_test",
    srcs = ["pw_unit_test.cc"],
    deps = [
        "@pigweed//pw_unit_test",
        ":pw_unit_test_lib",
    ],
)
